{
  name: "Continous Release Builds",
  "on": {
    push: {
      tags: [
        "v*",
      ],
      branches: [
        "*",
      ],
    },
    pull_request: {
      "paths-ignore": [
        "**.md",
      ],
    },
  },
  env: {
    CARGO_INCREMENTAL: 0,
    CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse,
  },
  jobs: {
    lint: {
      "runs-on": "ubuntu-latest",
      steps: [
        {
          uses: "actions/checkout@v3",
        },
        {
          uses: "actions-rs/toolchain@v1",
          with: {
            profile: minimal,
            override: true,
            toolchain: stable,
            target: "${{ matrix.job.target }}",
          },
        },
        {
          name: "Cache dependencies",
          uses: "Swatinem/rust-cache@v1",
        },
        {
          run: "rustup component add clippy",
        },
        {
          uses: "actions-rs/clippy-check@v1",
          with: {
            token: "${{ secrets.GITHUB_TOKEN }}",
            args: "--all-features -- -D warnings",
          },
        },
        {
          name: "Check format",
          run: "cargo fmt -- --check",
        },
        {
          name: "Setup Wasmer",
          uses: "wasmerio/setup-wasmer@v1",
        },
        {
          name: "Check versions consistent (Cargo / wapm / tag (v*))",
          run: "\
            set -x\n
            jq -ne \\\n
           \   --argjson wapm \"$(wasmer run liftm/rq -- -tJ <wasmer.toml)\"\\\n
           \   --argjson cargo \"$(wasmer run liftm/rq -- -tJ <Cargo.toml)\"\\\n
           \   --arg ref \"${{ github.ref }}\"\\\n
            '($wapm.package.version ==  $cargo.package.version) and '\\\n\
            '(($ref | startswith(\"v\") | not) or ($ref | ltrimstr(\"v\") | . == $cargo.package.version))'
          ",
        },
      ],
    },
    build: {
      name: Build,
      strategy: {
        "fail-fast": false,
        matrix: {
          job: [
            {
              target: "x86_64-unknown-linux-musl",
              exe: "amd64-linux",
              os: "ubuntu-latest",
              features: default,
            },
            {
              target: "aarch64-unknown-linux-musl",
              exe: "aarch64-linux",
              os: "ubuntu-latest",
              features: default,
            },
            {
              target: "armv7-unknown-linux-musleabi",
              exe: "armv7-linux",
              os: "ubuntu-latest",
              features: default,
            },
            {
              target: "wasm32-wasi",
              exe: "wasi.wasm",
              os: "ubuntu-latest",
              features: "",
            },
            {
              target: "x86_64-apple-darwin",
              exe: macos,
              os: "macos-latest",
              features: default,
            },
            {
              target: "x86_64-pc-windows-msvc",
              exe: "windows.exe",
              os: "windows-2019",
              features: default,
            },
          ],
        },
      },
      "runs-on": "${{ matrix.job.os }}",
      steps: [
        {
          uses: "actions/checkout@v2",
        },
        {
          uses: "actions-rs/toolchain@v1",
          with: {
            profile: minimal,
            toolchain: "1.69.0",
            override: true,
            target: "${{ matrix.job.target }}",
            components: "rust-src",
          },
        },
        {
          uses: "actions-rs/cargo@v1",
          with: {
            "use-cross": true,
            args: "--release --target=${{ matrix.job.target }} --locked",
            command: build,
          },
        },
        {
          name: "Rename result",
          run: "\
            rm target/${{ matrix.job.target }}/release/patch-json.d\n\
            cp target/${{ matrix.job.target }}/release/patch-json* patch-json-${{ matrix.job.exe
            }}\n\
          ",
        },
        {
          name: "Archive production artifacts",
          uses: "actions/upload-artifact@v2",
          with: {
            name: arty,
            path: "patch-json-${{ matrix.job.exe }}",
          },
        },
      ],
    },
    "cargo-publish": {
      name: "cargo-publish (always dry)",
      "runs-on": "ubuntu-20.04",
      needs: [
        build,
        lint,
      ],
      steps: [
        {
          uses: "actions/checkout@v3",
        },
        {
          name: "Cargo publish (always dry - done manually)",
          run: "\
            git config --global user.email \"runner@gha.local\"\n\
            git config --global user.name \"Github Action\"\n\
            cargo publish --allow-dirty --token \"${{ secrets.CRATES_IO_TOKEN }}\" --dry-run\n\
          ",
        },
      ],
    },
    "wapm-publish": {
      "runs-on": "ubuntu-20.04",
      needs: [
        build,
        lint,
      ],
      steps: [
        {
          name: "Setup Wasmer",
          uses: "wasmerio/setup-wasmer@v1",
        },
        {
          uses: "actions/checkout@v2",
        },
        {
          uses: "actions/download-artifact@v3",
          with: {
            name: arty,
          },
        },
        {
          run: "\
            mkdir -p target/wasm32-wasi/release/\n
            mv -v patch-json-wasi.wasm target/wasm32-wasi/release/patch-json.wasm\n
            ",
        },
        {
          name: "WAPM publish (dry)",
          run: "wasmer publish --dry-run",
          if: "!startsWith(github.ref, 'refs/tags/v')",
          env: {
            WAPM_REGISTRY_TOKEN: "${{ secrets.WAPM_REGISTRY_TOKEN }}",
          },
        },
        {
          name: "WAPM publish",
          run: "wasmer publish",
          if: "startsWith(github.ref, 'refs/tags/v')",
          env: {
            WAPM_REGISTRY_TOKEN: "${{ secrets.WAPM_REGISTRY_TOKEN }}",
          },
        },
      ],
    },
    release: {
      name: "Tagged Release",
      "runs-on": "ubuntu-20.04",
      needs: [
        build,
        lint,
      ],
      steps: [
        {
          uses: "actions/download-artifact@v2",
        },
        {
          uses: "marvinpinto/action-automatic-releases@latest",
          if: "startsWith(github.ref, 'refs/tags/v')",
          with: {
            repo_token: "${{ secrets.GITHUB_TOKEN }}",
            prerelease: false,
            files: "\
              ./arty/patch-json-wasi.wasm\n\
              ./arty/patch-json-windows.exe\n\
              ./arty/patch-json-macos\n\
              ./arty/patch-json-aarch64-linux\n\
              ./arty/patch-json-armv7-linux\n\
              ./arty/patch-json-amd64-linux\n\
            ",
          },
        },
      ],
    },
  },
}
